---
# dependencies:
# - ginkgo
# - goi18n
# - golangci-lint
# - goveralls
# - yamllint

version: "3"
silent: true

dotenv: [".env"]

vars:
  FORMAT: json
  BINARY_NAME: nefilim
  DEPLOY_DIR: ./locale/deploy
  OUT_DIR: ./locale/out
  L10N_DIR: ./locale/out/l10n
  #
  SOURCE_LANG: en-GB
  SOURCE_ACTIVE: "active.{{.SOURCE_LANG}}.{{.FORMAT}}"
  #
  LANGUAGE_US: en-US
  US_OUT_DIR: "{{.OUT_DIR}}/{{.LANGUAGE_US}}"
  ACTIVE_US: "{{.BINARY_NAME}}.active.en-US.{{.FORMAT}}"
  TRANSLATE_US: "{{.BINARY_NAME}}.translate.en-US.{{.FORMAT}}"
  TRANSLATE_US_FILEPATH: "{{.US_OUT_DIR}}/{{.TRANSLATE_US}}"
  COVER_DIR: "./"
  COVER_FILE: "coverage.out"
  COVER_HTML_PATH: "./coverage.html"
  GINKGO_REPORT: "ginkgo.report"

tasks:
  # === build ================================================

  b:
    cmds:
      - go build ./...

  # === test =================================================
  # to see how to select tests by label, refer to:
  # https://onsi.github.io/ginkgo/#spec-labels
  #
  # equal: --label-filter="foo"
  #   not: --label-filter="!foo"
  #   and: --label-filter="!foo && bar"
  #    or: --label-filter="!foo || bar"
  # regex: --label-filter="/pattern/"

  dry:
    cmds:
      - ginkgo -v --dry-run ./...

  t:
    cmds:
      - go test ./...

  lfs:
    cmds:
      - go test ./lfs

  toc:
    cmds:
      - go test ./collections

  tn:
    cmds:
      - go test

  clean:
    cmds:
      - go clean

  clean-t:
    cmds:
      - go clean -testcache

  # === ginkgo ================================================

  # initialise a test suite for a package. (only 1 per package)
  boot:
    cmds:
      - ginkgo bootstrap

  # run tests suites recursive
  g:
    cmds:
      - ginkgo -r

  # invoke as task gen -- <item>
  gl:
    cmds:
      - ginkgo -r --label-filter={{.CLI_ARGS}}

  # run tests suites recursive with verbose
  gv:
    cmds:
      - ginkgo -r -v

  # generate a test file for the item provided (item_test.go)
  # invoke as task gen -- <item>
  gen:
    cmds:
      - ginkgo generate {{.CLI_ARGS}}

  # === watch ================================================

  watchv:
    cmds:
      - ginkgo watch -v -r -p ./...

  watchvc:
    cmds:
      - ginkgo watch -v -r -p ./collections

  watch:
    cmds:
      - ginkgo watch -r -p ./...

  # === lint =================================================

  lint:
    cmds:
      - golangci-lint run

  linty:
    cmds:
      - yamllint *.y*ml

  # === coverage =============================================

  cover-clean:
    cmds:
      - rm -rf ./coverage

  cover-publish:
    cmds:
      - goveralls -repotoken {{.COVERALLS_TOKEN}}

  cover-setup:
    cmds:
      - mkdir -p ./coverage

  cover-ginkgo:
    cmds:
      - ginkgo run -r -json-report {{.GINKGO_REPORT}} -coverpkg=./... -coverprofile={{.COVER_FILE}} --output-dir {{.COVER_DIR}}

  cover-show:
    cmds:
      - open {{.COVER_HTML_PATH}}

  cover-exclude:
    cmds:
      - ./scripts/apply-coverage-exclusions.sh

  cover:
    cmds:
      - task: cover-setup
      - task: cover-ginkgo
      - task: cover-exclude
      - go tool cover -html=./coverage.out -o {{.COVER_HTML_PATH}}
      - open {{.COVER_HTML_PATH}}
